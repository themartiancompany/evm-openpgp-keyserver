#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  publish_date=""
  ks_address=""
  ks_version=""
  cache_dir=""
  gnupg_home=""
  input_type=""
  key_upload=""
  target_address=""
  target_uri=""
  target_key=""
  key_fingerprint=""
  key_name=""
  key_email=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-chains-explorers'
  _check_cmd \
    'evm-chains-info'
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-address' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-versions' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployments-dir' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'evmfs'
  _check_cmd \
    'gpg-key-info'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/evm-openpgp-keyserver"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/evm-openpgp-keyserver"
  echo \
    "${_dir}"
}

_key_evmfs_upload() {
  local \
    _key="${1}"
  evmfs \
    "${_evmfs_publish_opts[@]}" \
    publish \
      "${_key}" 
  _uri="$( \
    evmfs \
      "${_evmfs_call_opts[@]}" \
      publish \
        "${_key}")"
  _msg=(
    "Key '${_key}' correctly uploaded,"
    "target URI set to '${_uri}'."
  )
  _msg_info \
    "${_msg[*]}"
}

_opts_setup() {
  local \
    _msg=()
  if [[ "${quiet}" == "n" ]]; then
    _publish_call_opts+=(
      -v
    )
    _evmfs_publish_opts+=(
      -v
    )
  fi
  _evm_contract_call_opts+=(
    -n
      "${_target_network}"
    -N
      "${_wallet_name}"
    -k
      "${_api_key_path}"
    -A
      "${_abi}"
    -B
      "${_bytecode}"
    -C
      "${_compiler_output}"
  )
  _evmfs_opts+=(
    -n
      "${_target_network}"
    -N
      "${_wallet_name}"
    -k
      "${_api_key_path}"
    -w
      "${_wallet_path}"
    -s
      "${_wallet_seed}"
    -p
      "${_wallet_password}"
  )
  _publish_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -t
      "dynamic"
  )
  _evmfs_publish_opts+=(
    "${_evmfs_opts[@]}"
  )
  _evmfs_call_opts+=(
    "${_evmfs_opts[@]}"
    -m
      "simulate"
  )
  _msg=(
    "The EVM contract-caller will be called"
    "with base options '${_evm_contract_call_opts[*]}'."
  )
  _msg_info \
    "${_msg[*]}"
}

_key_publish() {
  local \
    _target_network="${1}" \
    _ks_address="${2}" \
    _namespace="${3}" \
    _address="${4}" \
    _fingerprint="${5}" \
    _key="${6}" \
    _uri="${7}" \
    _upload="${8}" \
    _abi="${9}" \
    _bytecode="${10}" \
    _compiler_output="${11}" \
    _msg=() \
    _evm_contract_call_opts=() \
    _evmfs_opts=() \
    _publish_call_opts=()
  _opts_setup
  _msg=(
    "User '${_namespace}'"
    "publishing key '${_key}'"
    "with fingerprint '${_fingerprint}'"
    "for address '${_address}'."
  )
  _msg_info \
    "${_msg[*]}"
  if [[ "${_upload}" == "y" ]]; then
    _key_evmfs_upload \
      "${_key}"
  fi
  evm-contract-call \
    "${_publish_call_opts[@]}" \
    "${_ks_address}" \
    "publishKey" \
    "${_address}" \
    "${_namespace}" \
    "${_fingerprint}" \
    "${_uri}"
  _msg=(
    "Key '${_key}' pointing to URI '${_uri}'"
    "correctly published for user '${_address}'"
    "by publisher '${_namespace}'."
  )
  _msg_info \
    "${_msg[*]}"
}

_key_address_check() {
  local \
    _address="${1}" \
    _email="${2}" \
    _domain \
    _msg=()
  _domain="${_email#*@}"
  if [[ "${_address}" != "${_domain}" ]]; then
    _msg=(
      "The target address '${_address}'"
      "does not correspond to domain '${_domain}'"
      "for email '${_email}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_evm_openpgp_key_publish() {
  local \
    _ks_address="${1}" \
    _ks_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _cache_dir="${10}" \
    _input_type="${11}" \
    _key_upload="${12}" \
    _target_key="${13}" \
    _target_address="${14}" \
    _target_uri="${15}" \
    _key_fingerprint="${16}" \
    _key_name="${17}" \
    _key_email="${18}" \
    _namespace \
    _ks_abi \
    _ks_bytecode \
    _ks_compiler_output
  shift \
    18
  _command_args+=(
    "$@"
  )
  _key_address_check \
    "${_target_address}" \
    "${_key_email}"
  _namespace="$( \
    evm-wallet \
     get \
       "${_wallet_name}" \
       "address")"
  if [[ "${_namespace}" != "${_target_address}" ]]; then
    _msg=(
      "User '${_namespace}' publishing"
      "key for user '${_target_address}'."
    )
    _msg_info \
      "${_msg[*]}"
  fi
  if [[ "${_input_type}" == "evmfs" ]] && \
     [[ "${_key_upload}" == "y" ]]; then
    _msg=(
      "Option 'upload key' enabled with"
      "input type '${_input_type}'. If the input"
      "key address does not belong to your"
      "EVMFS namespace this will re-upload"
      "it in there. If you are trying to confirm"
      "another user's key, run ${app_name}"
      "with the -S option."
    )
    _msg_warning \
      "${_msg[*]}"
  elif [[ "${_input_type}" == "file" || \
          "${_input_type}" == "fingerprint" ]] && \
       [[ "${_key_upload}" == "n" ]]; then
    _msg=(
      "Option 'upload key' disabled with"
      "input type '${_input_type}'. If the input"
      "key has not been already uploaded to your"
      "EVMfs namespace this will produce a dead link."
      "Please double check you have already uploaded"
      "the key on your namespace or run"
      "${app_name} without the -S option."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_target_network}" \
    "KeyServer" \
    "_ks" \
    "${_ks_version}"
  _key_publish \
    "${_target_network}" \
    "${_ks_address}" \
    "${_namespace}" \
    "${_target_address}" \
    "${_key_fingerprint}" \
    "${_target_key}" \
    "${_target_uri}" \
    "${_key_upload}" \
    "${_ks_abi}" \
    "${_ks_bytecode}" \
    "${_ks_compiler_output}"
}

_key_retrieve_keystore() {
  local \
    _fingerprint="${1}" \
    _gnupg_home="${2}" \
    _output_file="${3}" \
    _gpg_opts=() \
    _msg=()
  _msg=(
    "Exporting in '${_output_file}' the key"
    "with fingerprint '${_fingerprint}'"
    "from the keystore in '${_gnupg_home}'."
  )
  _msg_info \
    "${_msg[*]}"
  _gpg_opts+=(
      --homedir
        "${_gnupg_home}"
      --export
      --armor
  )
  gpg \
    "${_gpg_opts[@]}" \
    "${_fingerprint}" 2>/dev/null > \
    "${_output_file}"
}

_key_retrieve_evmfs() {
  local \
    _uri="${1}" \
    _output_file="${2}" \
    _api \
    _name \
    _network \
    _password \
    _seed \
    _wallet \
    _evmfs_opts=()
  _msg=(
    "Downloading in '${_output_file}' the key"
    "at URI '${_uri}'."
  )
  _msg_info \
    "${_msg[*]}"
  _network="${target_network}"
  _name="${wallet_name}"
  _wallet="${wallet_path}"
  _password="${wallet_password}"
  _seed="${wallet_seed}"
  _api="${api_key}"
  _evmfs_opts+=(
    -n
      "${_network}"
    -N
      "${_name}"
    -w
      "${_wallet}"
    -s
      "${_seed}"
    -p
      "${_password}"
    -k
      "${_api}"
    -o
      "${_output_file}"
  )
  evmfs \
    "${_evmfs_opts[@]}" \
    get \
      "${_uri}"
}

_target_key_check() {
  local \
    _input_type \
    _target_key \
    _msg=()
  _input_type="${input_type}"
  _target_key="${target_key}"
  if [[ "${_input_type}" == "file" ]]; then
    if [[ ! -e "${_target_key}" ]]; then
      _msg=(
        "Key file '${_target_key}'"
        "does not exist."
      )
      _msg_error \
        "${_msg[*]}" \
        1
    elif [[ -e "${_target_key}" ]]; then
      _set \
        "target" \
        "key" \
        "$(realpath \
             "${_target_key}")"
    fi
  fi
}

_key_data_auto_detect() {
  local \
    _cache_dir \
    _gnupg_home \
    _email \
    _input_type \
    _fingerprint \
    _key \
    _uri \
    _name \
    _gpg_key_info_opts=() \
    _msg=()
  _uri=""
  _cache_dir="${cache_dir}"
  _key="${target_key}"
  _gnupg_home="${gnupg_home}"
  _input_type="${input_type}"
  _gpg_key_info_opts+=(
    -H
      "${_gnupg_home}"
  )
  if [[ "${_input_type}" == "fingerprint" ]]; then
    _msg=(
      "Exporting the key from the keystore"
      "in '${_gnupg_home}'."
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_cache_dir}"
    _key_retrieve_keystore \
      "${_key}" \
      "${_gnupg_home}" \
      "${_cache_dir}/temp.asc"
    _key="${_cache_dir}/temp.asc"
  elif [[ "${_input_type}" == "evmfs" ]]; then
    mkdir \
      -p \
      "${_cache_dir}"
    _key_retrieve_evmfs \
      "${_key}" \
      "${_cache_dir}/temp.asc"
    _uri="${_key}"
    _key="${_cache_dir}/temp.asc"
  fi
  _fingerprint="$( \
    gpg-key-info \
      "${_gpg_key_info_opts[@]}" \
      -o \
        "fingerprint" \
      "${_key}")"
  if [[ "${_fingerprint}" == "" ]]; then
    _msg_error \
      "No fingerprint found." \
      1
  fi
  _name="$( \
    gpg-key-info \
      "${_gpg_key_info_opts[@]}" \
      -o \
        "name" \
      "${_key}")"
  if [[ "${_name}" == "" ]]; then
    _msg=(
      "The key '${_key}' has no names"
      "associated to it."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _email="$( \
    gpg-key-info \
      "${_gpg_key_info_opts[@]}" \
      -o \
        "email" \
      "${_key}")"
  if [[ "${_email}" == "" ]]; then
    _msg=(
      "The key '${_key}' has no emails"
      "associated to it."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _set \
    "target" \
    "key" \
    "${_key}"
  _set \
    "target" \
    "uri" \
    "${_uri}"
  _set_override \
    "key" \
    "fingerprint" \
    "${_fingerprint}"
  _set_override \
    "key" \
    "name" \
    "${_name}"
  _set_override \
    "key" \
    "email" \
    "${_email}"
}

_key_upload_auto_detect() {
  local \
    _input_type \
    _upload \
    _msg=()
  _input_type="$( \
    _get \
      "input" \
      "type")"
  if [[ "${_input_type}" == "file" ]] || \
     [[ "${_input_type}" == "fingerprint" ]]; then
    _upload="y"
  elif [[ "${_input_type}" == "evmfs" ]]; then
    _upload="n"
  else
    _msg=(
      "Unknown input type '${_input_type}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _set_override \
    "key" \
    "upload" \
    "${_upload}"
}

_input_type_auto_detect() {
  local \
    _target_key \
    _input_type
  _target_key="${target_key}"
  _input_type="fingerprint"
  if [[ "${_target_key}" != "" ]]; then
    if [[ -e "${_target_key}" ]]; then
      _input_type="file"
    elif [[ "${_target_key}" == "evmfs://"* ]]; then
      _input_type="evmfs"
    fi
  fi
  _set_override \
    "input" \
    "type" \
    "${_input_type}"
}

_set_overrides() {
  local \
    _target_key
  _target_key="${target_key}"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "publish" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "evm-openpgp-keyserver" \
    "${user_level}"
  _network_auto_detect \
    "KeyServer" \
    "${deployments_dir}" \
    "${user_level}"
  _api_key_auto_detect \
    "${target_network}"
  _wallet_overrides_set \
    "evm-wallet" \
    "default" \
    "y"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _contract_setup_auto_detect \
    "evm-openpgp-keyserver" \
    "KeyServer" \
    "ks" \
    "${target_network}" \
    "${user_level}" \
    "${deployments_dir}"
  _set_override \
    "gnupg" \
    "home" \
    "${HOME}/.gnupg"
  _input_type_auto_detect
  _key_upload_auto_detect
  if [[ "${_target_key}" != "" ]]; then
    _target_key_check
    _key_data_auto_detect
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _contract \
    _ks_deployment \
    _networks \
    _usage_text
  _contract="KeyServer"
  _ks_deployment="${deployments_dir}/${_contract}"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_ks_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Ethereum Virtual Machine-compatible network OpenPGP Key Server keys publisher

Usage:
  ${app_name}
    [options]
    <address>
    <key> (or -H <gnupg_home>
              -f
              <fingerprint>)

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -H <gnupg_home>        GnuPG configuration directory.
                            Default: ${gnupg_home}
     -t <input_type>        It can be 'file', 'fingerprint' or
                            'evmfs'.
                            Default: ${input_type}
     -S                     If enabled it won't upload the
                            key file to the EVMfs.
                            Default: ${input_type}

  contract options:
     -A <ks_address>        Address of the EVM OpenPGP Key Server
                            on the network.
                            Default: ${ks_address}
     -V <ks_version>        Version of the target EVM OpenPGP Key
                            Server.
                            Default: ${ks_version}

  libevm options:
     -u                     Whether to retrieve key server
                            address from user directory or from
                            a custom deployment.
                            Default: ${user_level}
     -d <deployments_dir>   Contracts deployments directory.
                            Default: ${deployments_dir}
     -n <network>           EVM network name.
                            Default: ${target_network}

  credentials options:
     -N <wallet_name>       Wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       Wallet path.
                            Default: ${wallet_path}
     -p <wallet_password>   Wallet password.
                            Default: ${wallet_password}
     -s <wallet_seed>       Wallet seed path.
                            Default: ${wallet_seed}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}

  applications options
     -C <cache_dir>         Work directory
                            Default: ${cache_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

_display_flags() {
  local \
    _flag \
    _flags=(
      "${1}"
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Publish date:   ${publish_date}"
  _msg_info "       Key server address:   ${ks_address}"
  _msg_info "       Key server version:   ${ks_version}"
  _msg_info "               User level:   ${user_level}"
  _msg_info "    Deployments directory:   ${deployments_dir}"
  _msg_info "                Publisher:   ${wallet_address}"
  _msg_info "              Wallet name:   ${wallet_name}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "          Cache directory:   ${cache_dir}"
  _msg_info "               Input type:   ${input_type}"
  _msg_info "               Upload key:   ${key_upload}"
  _msg_info "           Target address:   ${target_address}"
  _msg_info "               Target key:   ${target_key}"
  _msg_info "          Key fingerprint:   ${key_fingerprint}"
  _msg_info "                 Key name:   ${key_name}"
  _msg_info "                Key email:   ${key_email}"
}

_globals
_global_variables
_libevm_global_variables
_libevm_app_global_variables
_requirements
_config_user_init \
  "${app_name}"
# shellcheck disable=SC2034
while \
  getopts \
    'A:V:ud:N:w:p:s:n:k:H:t:SC:cvh?' \
    arg; do
  case \
    "${arg}" in
    A) override_ks_address="${OPTARG}" ;;
    V) override_ks_version="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    H) override_gpg_home="${OPTARG}" ;;
    t) override_input_type="${OPTARG}" ;;
    S) override_key_upload="n" ;;
    C) override_cache_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No target address given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  target_address="${1}"
fi
if (( $# < 2 )); then
  _msg_error \
    "No target key given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( 1 < $# )); then
  target_key="${2}"
fi
shift \
  2 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${ks_address}"
  "${ks_version}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${cache_dir}"
  "${input_type}"
  "${key_upload}"
  "${target_key}"
  "${target_address}"
  "${target_uri}"
  "${key_fingerprint}"
  "${key_name}"
  "${key_email}"
)
_evm_openpgp_key_publish \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
