#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  receive_date=""
  ks_address=""
  ks_version=""
  deployments_dir=""
  user_level=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  api_key=""
  cache_dir=""
  gnupg_home=""
  input_type=""
  key_import=""
  target_publisher=""
  target_address=""
  target_key=""
  key_fingerprint=""
  key_import=""
  output_prefix=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-chains-explorers'
  _check_cmd \
    'evm-chains-info'
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-address' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-versions' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployments-dir' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'evmfs'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/evm-openpgp-keyserver"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/evm-openpgp-keyserver"
  echo \
    "${_dir}"
}

_opts_setup() {
  local \
    _msg=() \
    _credentials_opts=()
  if [[ "${quiet}" == "n" ]]; then
    _evmfs_publish_opts+=(
      -v
    )
  fi
  _credentials_opts+=(
    -N
      "${_wallet_name}"
    -k
      "${_api_key_path}"
    -w
      "${_wallet_path}"
    -s
      "${_wallet_seed}"
    -p
      "${_wallet_password}"
  )
  _evm_contract_call_opts+=(
    "${_credentials_opts[@]}"
    -n
      "${_target_network}"
    -A
      "${_abi}"
    -B
      "${_bytecode}"
    -C
      "${_compiler_output}"
    -t
      "static"
  )
  _evmfs_opts+=(
    "${_credentials_opts[@]}"
    -n
      "${_target_network}"
  )
  _keys_amount_call_opts+=(
    "${_evm_contract_call_opts[@]}"
  )
  _uri_get_call_opts+=(
    "${_evm_contract_call_opts[@]}"
  )
  _msg=(
    "evm-contract-call will be called"
    "with base options '${_evm_contract_call_opts[*]}'"
  )
  _msg_info \
    "${_msg[*]}"
}

_key_download() {
  local \
    _uri="${1}" \
    _output_file="${2}"
  _msg=(
    "downloading in '${_output_file}' the key"
    "at URI '${_uri}'."
  )
  _msg_info \
    "${_msg[*]}"
  evmfs \
    "${_evmfs_opts[@]}" \
    get \
      "${_uri}"
}

_key_check_() {
  local \
    _cache_dir \
    _gnupg_home \
    _email \
    _input_type \
    _fingerprint \
    _key \
    _uri \
    _name \
    _gpg_key_info_opts=() \
    _msg=()
  _uri=""
  _cache_dir="$( \
    _get \
      "cache" \
      "dir")"
  _key="$( \
    _get \
      "target" \
      "key")"
  _gnupg_home="$( \
    _get \
      "gnupg" \
      "home")"
  _input_type="$( \
    _get \
      "input" \
      "type")"
  _gpg_key_info_opts+=(
    -H
      "${_gnupg_home}"
  )
  if [[ "${_input_type}" == "fingerprint" ]]; then
    _msg=(
      "exporting the key from the keystore"
      "in '${_gnupg_home}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_cache_dir}"
    _key_retrieve_keystore \
      "${_key}" \
      "${_gnupg_home}" \
      "${_cache_dir}/temp.asc"
    _key="${_cache_dir}/temp.asc"
  elif [[ "${_input_type}" == "evmfs" ]]; then
    mkdir \
      -p \
      "${_cache_dir}"
    _key_retrieve_evmfs \
      "${_key}" \
      "${_cache_dir}/temp.asc"
    _uri="${_key}"
    _key="${_cache_dir}/temp.asc"
  fi
  _fingerprint="$( \
    gpg-key-info \
      "${_gpg_key_info_opts[@]}" \
      -o \
        "fingerprint" \
      "${_key}")"
  if [[ "${_fingerprint}" == "" ]]; then
    _msg_error \
      "no fingerprint found" \
      1
  fi
  _name="$( \
    gpg-key-info \
      "${_gpg_key_info_opts[@]}" \
      -o \
        "name" \
      "${_key}")"
  if [[ "${_name}" == "" ]]; then
    _msg=(
      "the key '${_key}' has no names"
      "associated to it"
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _email="$( \
    gpg-key-info \
      "${_gpg_key_info_opts[@]}" \
      -o \
        "email" \
      "${_key}")"
  if [[ "${_email}" == "" ]]; then
    _msg=(
      "the key '${_key}' has no emails"
      "associated to it"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _set \
    "target" \
    "key" \
    "${_key}"
  _set \
    "target" \
    "uri" \
    "${_uri}"
  _set_override \
    "key" \
    "fingerprint" \
    "${_fingerprint}"
  _set_override \
    "key" \
    "name" \
    "${_name}"
  _set_override \
    "key" \
    "email" \
    "${_email}"
}

_target_key_check() {
  local \
    _input_type \
    _target_key \
    _msg=()
  _input_type="$( \
    _get \
      "input" \
      "type")"
  _target_key="$( \
    _get \
      "target" \
      "key")"
  if [[ "${_input_type}" == "file" ]]; then
    if [[ ! -e "${_target_key}" ]]; then
      _msg=(
        "key file '${_target_key}'"
        "does not exist."
      )
      _msg_error \
        "${_msg[*]}" \
        1
    elif [[ -e "${_target_key}" ]]; then
      _set \
        "target" \
        "key" \
        "$(realpath \
             "${_target_key}")"
    fi
  fi
}

_keys_amount_get() {
  evm-contract-call \
    "${_keys_amount_call_opts[@]}" \
    "${_ks_address}" \
    "keyNo" \
    "${_address}" \
    "${_publisher}"
}

_uri_key_get() {
  local \
    _key="${1}"
  evm-contract-call \
    "${_uri_get_call_opts[@]}" \
    "${_ks_address}" \
    "readKey" \
    "${_address}" \
    "${_publisher}" \
    "${_key}"
}

_key_fingerprint_get() {
  local \
    _fingerprint="${1}"
  evm-contract-call \
    "${_uri_get_call_opts[@]}" \
    "${_ks_address}" \
    "readKeyFingerprint" \
    "${_address}" \
    "${_publisher}" \
    "${_fingerprint}"
}
_keys_receive() {
  local \
    _target_network="${1}" \
    _ks_address="${2}" \
    _publisher="${3}" \
    _address="${4}" \
    _fingerprint="${5}" \
    _key="${6}" \
    _abi="${9}" \
    _bytecode="${10}" \
    _compiler_output="${11}" \
    _msg=() \
    _evm_contract_call_opts=() \
    _evmfs_opts=() \
    _keys=() \
    _keys_amount \
    _keys_amount_call_opts=() \
    _work_dir \
    _uri
  _work_dir="${_cache_dir}/receive"
  mkdir \
    -p \
    "${_work_dir}"
  _opts_setup
  if [[ "${_key}" == "" ]] && \
     [[ "${_fingerprint}" == "" ]]; then
    _msg=(
      "no target key or fingerprint"
      "specified, downloading all"
      "available keys."
    )
    _msg_info \
      "${_msg[*]}"
    _keys_amount="$( \
      _keys_amount_get)"
    _msg=(
      "got a total of '${_keys_amount}'"
      "for address '${_address}'"
    )
    _msg_info \
      "${_msg[*]}"
    _keys+=( $( \
      seq \
        0 \
        "$(( "${_keys_amount}" - 1))")
    )
  elif [[ "${_key}" != "" ]] && \
       [[ "${_fingerprint}" == "" ]]; then;
    _keys+=(
      "${_key}"
    )
  elif [[ "${_fingerprint}" != "" ]] && \
       [[ "${_key}" == "" ]]; then;
    _key="$( \
      _key_fingerprint_get \
        "${_fingerprint}")"
    _msg=(
      "got key '${_key}' for"
      "fingerprint '${_fingerprint}'"
    )
    _msg_info \
      "${_msg[*]}"
    _keys+=(
      "${_key}"
    )
  fi
  for _key in "${_keys[@]}"; do
    _msg=(
      "downloading '${_publisher}'"
      "key '${_key}' for address"
      "'${_address}'."
    )
    _msg_info \
      "${_msg[*]}"
    _uri="$( \
      _uri_key_get \
        "${_key}")"
  done
  if [[]]; then
  fi
  evm-contract-call \
    "${_publish_call_opts[@]}" \
    "${_ks_address}" \
    "readKey" \
    "${_address}" \
    "${_publisher}" \
    "${_fingerprint}" \
    "${_uri}"
  _msg=(
    "key '${_key}' pointing to URI '${_uri}'"
    "correctly published for user '${_address}'"
    "by publisher '${_namespace}'"
  )
  _msg_info \
    "${_msg[*]}"
  _key_address_check \
    "${_target_address}" \
    "${_key_email}"

}

_abi_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _name="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_name}/${_network}/${_version}/${_name}.abi.json"
}

_bytecode_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _name="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_name}/${_network}/${_version}/${_name}.bin"
}

_compiler_output_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _name="${3}" \
    _version="${4}"
  echo \
    "${_deployments}/${_name}/${_network}/${_version}/${_name}.json"
}

_key_address_check() {
  local \
    _address="${1}" \
    _email="${2}" \
    _domain \
    _msg=()
  _domain="${_email#*@}"
  if [[ "${_address}" != "${_domain}" ]]; then
    _msg=(
      "the target address '${_address}'"
      "does not correspond to domain '${_domain}'"
      "for email '${_email}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_evm_openpgp_key_receive() {
  local \
    _ks_address="${1}" \
    _ks_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _cache_dir="${10}" \
    _input_type="${11}" \
    _target_publisher="${12}" \
    _target_address="${13}" \
    _target_key="${14}" \
    _key_fingerprint="${15}" \
    _key_import="${16}" \
    _output_prefix="${17}" \
    _msg=() \
    _download_all \
    _ks_abi \
    _ks_bytecode \
    _ks_compiler_output
  shift \
    17
  _command_args+=(
    "$@"
  )
  _download_all="false"
  if [[ "${_target_publisher}" == "" ]]; then
    _target_publisher="${_target_address}"
    _msg=(
      "getting key(s) from user"
      "namespace '${_target_publisher}'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  if [[ "${_target_publisher}" != "${_target_address}" ]]; then
    _msg=(
      "you are not getting '${_target_address}'"
      "self-published key but from"
      "publisher '${_target_publisher}'"
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  if [[ "${_input_type}" == "fingerprint" ]]; then
    _key_fingerprint="${_target_key}"
    _target_key=""
  fi
  if [[ "${_target_key}" == "" ]] && \
     [[ "${_key_fingerprint}" == "" ]]; then
    _msg=(
      "no target key or fingerprint"
      "specified, downloading all"
      "available keys."
    )
    _download_all="true"
  fi
  _ks_abi="$( \
    _abi_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "KeyServer" \
      "${_ks_version}")"
  _ks_bytecode="$( \
    _bytecode_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "KeyServer" \
      "${_ks_version}")"
  _ks_compiler_output="$( \
    _compiler_output_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "KeyServer" \
      "${_ks_version}")"
  _keys_receive \
    "${_target_network}" \
    "${_ks_address}" \
    "${_target_publisher}" \
    "${_target_address}" \
    "${_key_fingerprint}" \
    "${_target_key}" \
    "${_ks_abi}" \
    "${_ks_bytecode}" \
    "${_ks_compiler_output}"
  _keys_import
}

_wallet_path_get() {
  local \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="${HOME}/.config/evm-wallet/${_name}.dat"
  echo \
    "${_path}"
}

_secret_get() {
  local \
    _secret="${1}" \
    _path \
    _name
  _name="$( \
    _get \
      "wallet" \
      "name")"
  _path="${HOME}/.config/evm-wallet/${_name}-${_secret}.txt"
  echo \
    "${_path}"
}

_api_key_auto_detect() {
  local \
    _chain="${1}" \
    _chain_name \
    _key \
    _msg=()
  _key="$( \
    evm-chains-explorers \
      -c \
        "${_chain}" \
      -s \
        'kirsh' \
      get \
        keys)"
  _chain_name="$( \
    evm-chains-info \
      -o \
        "name" \
      "${_chain}")"
  if [[ ! -e "${_key}" ]]; then
    _msg=(
      "Found no provider services"
      "keys for chain '${_chain_name}'."
      "Check available service"
      "providers with \"evm-chains-info"
      "-o explorers '${_chain}'\""
      "and add the relative api key in"
      "'<user_home>/.config/evm-chains-explorers/<service>/default.txt'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "api" \
    "key" \
    "${_key}"
}

_secret_auto_detect() {
  local \
    _secret="${1}" \
    _secret_type="${2}" \
    _dir \
    _key_gen_opts=() \
    _msg=()
  _path="$( \
    _secret_get \
      "${_secret}")"
  _dir="$( \
    dirname \
      "${_path}")"
  if [[ ! -e "${_path}" ]]; then
    _key_gen_opts+=(
      -t
        "${_secret_type}"
    )
    _msg=(
      "generating ${_secret} '${_path}'"
    )
    if [[ "${quiet}" == "n" ]]; then
      _msg_info \
        "${_msg[*]}"
    fi
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
    key-gen \
      "${_key_gen_opts[@]}" \
      "${_path}"
    chmod \
      400 \
      "${_path}"
    _msg=(
      "${_secret} '${_path}' successfully generated"
    )
    if [[ "${quiet}" == "n" ]]; then
      _msg_info \
        "${_msg[*]}"
    fi
  fi
  _set_override \
    "wallet" \
    "${_secret}" \
    "${_path}"
}

_deployments_dir_auto_detect() {
  local \
    _user_level \
    _evm_contract_deployments_dir_opts=() \
    _deployments_dir \
    _system_deployments
  _user_level="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user_level}" == "y" ]]; then
    _evm_contract_deployments_dir_opts+=(
      -u
    )
  fi
  _deployments_dir="$( \
    evm-contract-deployments-dir \
      "${_evm_contract_deployments_dir_opts[@]}" \
      "evm-openpgp-keyserver")"
  if [[ ! -d "${_deployments_dir}" ]]; then
    _system_deployments="$( \
     evm-contract-deployments-dir \
       "evm-openpgp-keyserver")"
    _msg=(
      "user deployments directory"
      "'${_deployments_dir}' does"
      "not exists, importing system deployments"
      "directory '${_system_deployments}'"
    )
    _msg_info \
      "${_msg[*]}"
    mkdir \
      -p \
      "${_deployments_dir}"
    chmod \
      700 \
      "${_deployments_dir}"
    cp \
     -r \
     "${_system_deployments}/"* \
     "${_deployments_dir}"
  fi
  _set_override \
    "deployments" \
    "dir" \
    "${_deployments_dir}"
}

_network_auto_detect() {
  local \
    _contract \
    _contract_deployment \
    _deployments \
    _user \
    _msg=()
  _contract="KeyServer"
  _deployments="$( \
    _get \
      "deployments" \
      "dir")"
  _contract_deployment="${_deployments}/${_contract}"
  _user="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
     "User deployments enabled, looking"
     "for cheapest network deployments at" 
     "path '${_contract_deployment}'"
   )
   _msg_info \
     "${_msg[*]}"
  fi
  _network="$( \
    evm-contract-deployment-networks \
      -C \
      "${_contract_deployment}")"
  if [[ "${_user}" == "y" ]]; then
    _msg=(
      "Found network '${_network}'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "target" \
    "network" \
    "${_network}"
}

_ks_version_auto_detect() {
  local \
    _config \
    _contract \
    _deployments \
    _network \
    _version
  _contract="KeyServer"
  _deployments="$( \
    _get \
      "deployments" \
      "dir")"
  _network="$( \
    _get \
      "target" \
      "network")"
  _config="${_deployments}/${_contract}/${_network}/config.sh"
  _version="$( \
    evm-contract-deployment-versions \
      -H \
      "${_config}")"
  _set_override \
    "ks" \
    "version" \
    "${_version}"
}

_ks_address_auto_detect() {
  local \
    _address \
    _contract \
    _network \
    _deployments \
    _user \
    _version \
    _evm_contract_deployment_address_opts=() \
    _msg=()
  _contract="KeyServer"
  _network="$( \
    _get \
      "target" \
      "network")"
  _evm_contract_deployment_address_opts+=(
    -n
      "${_network}"
  )
  _version="$( \
    _get \
      "ks" \
      "version")"
  if [[ "${_version}" != "" ]]; then
    _evm_contract_deployment_address_opts+=(
      -V
        "${_version}"
    )
  fi
  _user="$( \
    _get \
      "user" \
      "level")"
  if [[ "${_user}" == "n" ]]; then
    _evm_contract_deployment_address_opts+=(
      -a
        "evm-openpgp-keyserver"
    )
  elif [[ "${_user}" == "y" ]]; then
    _deployments="$( \
      _get \
        "deployments" \
        "dir")"
    _evm_contract_deployment_address_opts+=(
      -u
      -d
        "${_deployments}" 
    )
  fi
  _address="$( \
    evm-contract-deployment-address \
      "${_evm_contract_deployment_address_opts[@]}" \
      "${_contract}")"
  if [[ "${_address}" == "" ]]; then
    _msg=(
      "error getting FileSystem version"
      "${_version} deployment address"
      "for network '${_network}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  _set_override \
    "ks" \
    "address" \
    "${_address}"
}

_input_type_auto_detect() {
  local \
    _target_key \
    _input_type \
    _re
  _re='^[0-9]+$'
  _target_key="$( \
    _get \
      "target" \
      "key")"
  _input_type="number"
  if [[ "${_target_key}" != "" ]]; then
    if ! [[ ${_target_key} =~ ${_re} ]] ; then
      _input_type="fingerprint"
    fi
  fi
  _set_override \
    "input" \
    "type" \
    "${_input_type}"
}

_key_import_auto_detect() {
  local \
    _gnupg_home \
    _import
  _gnupg_home="$( \
    _get \
      "gnupg" \
      "home")"
  _import="true"
  if [[ "${_gnupg_home}" == "${HOME}/.gnupg" ]]; then
    _import="false"
  fi
  _set_override \
    "key" \
    "import" \
    "${_import}"
}

_output_prefix_auto_detect() {
  local \
    _key_import \
    _output_prefix \
    _target_address
  _key_import="$( \
    _get \
      "key" \
      "import")"
  _target_address="$( \
    _get \
      "target" \
      "address")"
  _output_prefix=""
  if [[ "${_key_import}" == "n" ]]; then
    _output_prefix="$( \
      pwd)/${_target_address}.${_target_key}.key"
  fi
  _set_override \
    "output" \
    "prefix" \
    "${_output_prefix}"
}

_set_overrides() {
  local \
    _target_key
  _target_key="$( \
    _get \
      "target" \
      "key")"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "receive" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect
  _network_auto_detect
  _api_key_auto_detect \
    "$(_get \
         "target" \
         "network")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get)"
  _secret_auto_detect \
    "seed" \
    "seed"
  _secret_auto_detect \
    "password" \
    "plain"
  _set_override \
    "wallet" \
    "address" \
    "$(evm-wallet \
         get \
           "${wallet_name}" \
           "address")"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _ks_version_auto_detect
  _ks_address_auto_detect
  _set_override \
    "gnupg" \
    "home" \
    "${HOME}/.gnupg"
  _key_import_auto_detect
  _input_type_auto_detect
  _output_prefix_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _contract \
    _ks_deployment \
    _networks \
    _usage_text
  _contract="KeyServer"
  _ks_deployment="$( \
    _get \
      "deployments" \
      "dir")/${_contract}"
  _networks="$( \
    evm-contract-deployment-networks \
      -A \
      "${_ks_deployment}")"
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine-compatible network OpenPGP Key Server keys receiver

Usage:
  $(_get "app" "name")
    [options]
    <key>

  networks:
$(_display_networks \
     "${_networks[*]}")

  options:
     -A <ks_address>        Address of the EVM OpenPGP Key Server
                            on the network.
                            Default: $(_get "ks" "address")
     -V <ks_version>        Version of the target EVM OpenPGP Key
                            Server.
                            Default: $(_get "ks" "version")
     -u                     Whether to retrieve key server
                            address from user directory or from
                            a custom deployment.
                            Default: $(_get "user" "level")
     -d <deployments_dir>   Contracts deployments directory.
                            Default: $(_get "deployments" "dir")
     -N <wallet_name>       Wallet name.
                            Default: $(_get "wallet" "name")
     -w <wallet_path>       Wallet path.
                            Default: $(_get "wallet" "path")
     -p <wallet_password>   Wallet password.
                            Default: $(_get "wallet" "password")
     -s <wallet_seed>       Wallet seed path.
                            Default: $(_get "wallet" "seed")
     -n <network>           EVM network name (${_networks[*]}).
                            Default: $(_get "target" "network")
     -k <api_key>           Etherscan-like service key.
                            Default: $(_get "api" "key")
     -H <gnupg_home>        GnuPG configuration directory.
                            Default: $(_get "gnupg" "home")
     -t <input_type>        It can be 'fingerprint' or
                            'number'.
                            Default: $(_get "input" "type")
     -f                     Don't import the keys but save
                            them to file
                            Default: $(_get "key" "import")
     -o                     Output key prefix.
                            Default: $(_get "output" "prefix")
     -C <cache_dir>         Work directory
                            Default: $(_get "cache" "dir")

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

_display_flags() {
  local \
    _flag \
    _flags=(
      "${1}"
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

_display_networks() {
  local \
    _network \
    _network_name \
    _networks=(
      "${1}"
    )
  for _network \
    in "${_networks[@]}"; do
    _network_name="$( \
      evm-chains-info \
        -i \
          "id" \
        -o \
          "name" \
        "${_network}")"
  echo \
    "    ${_network_name}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Receive date:   $(_get "receive" "date")"
  _msg_info "       Key server address:   $(_get "ks" "address")"
  _msg_info "       Key server version:   $(_get "ks" "version")"
  _msg_info "               User level:   $(_get "user" "level")"
  _msg_info "    Deployments directory:   $(_get "deployments" "dir")"
  _msg_info "                Publisher:   $(_get "wallet" "address")"
  _msg_info "              Wallet name:   $(_get "wallet" "name")"
  _msg_info "              Wallet path:   $(_get "wallet" "path")"
  _msg_info "          Wallet password:   $(_get "wallet" "password")"
  _msg_info "              Wallet seed:   $(_get "wallet" "seed")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "                  API key:   $(_get "api" "key")"
  _msg_info "          Cache directory:   $(_get "cache" "dir")"
  _msg_info "               Input type:   $(_get "input" "type")"
  _msg_info "               Upload key:   $(_get "key" "upload")"
  _msg_info "         Target publisher:   $(_get "target" "publisher")"
  _msg_info "           Target address:   $(_get "target" "address")"
  _msg_info "               Target key:   $(_get "target" "key")"
  _msg_info "          Key fingerprint:   $(_get "key" "fingerprint")"
  _msg_info "              Output file:   $(_get "output" "file")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'A:V:ud:N:w:p:s:n:k:H:t:C:P:cvh?' \
    arg; do
  case \
    "${arg}" in
    A) override_ks_address="${OPTARG}" ;;
    V) override_ks_version="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    H) override_gpg_home="${OPTARG}" ;;
    t) override_input_type="${OPTARG}" ;;
    C) override_cache_dir="${OPTARG}" ;;
    P) override_target_publisher="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no target address given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "target" \
    "address" \
    "${1}"
fi
if (( $# < 2 )); then
  _msg=(
    "no target key given"
    "getting all of them"
  )
  _msg_warning \
    "${_msg[*]}"
fi
if (( 1 < $# )); then
  _set \
    "target" \
    "key" \
    "${2}"
fi
shift \
  2 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "$(_get \
       "ks" \
       "address")"
  "$(_get \
       "ks" \
       "version")"
  "$(_get \
       "deployments" \
       "dir")"
  "$(_get \
       "wallet" \
       "name")"
  "$(_get \
       "wallet" \
       "path")"
  "$(_get \
       "wallet" \
       "password")"
  "$(_get \
       "wallet" \
       "seed")"
  "$(_get \
       "target" \
       "network")"
  "$(_get \
       "api" \
       "key")"
  "$(_get \
       "cache" \
       "dir")"
  "$(_get \
       "input" \
       "type")"
  "$(_get \
       "target" \
       "key")"
  "$(_get \
       "target" \
       "address")"
  "$(_get \
       "target" \
       "uri")"
  "$(_get \
       "key" \
       "fingerprint")"
  "$(_get \
       "key" \
       "name")"
  "$(_get \
       "key" \
       "email")"
)
_evm_openpgp_key_receive \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
