#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  receive_date=""
  input_type=""
  key_import=""
  target_publisher=""
  target_address=""
  target_key=""
  key_fingerprint=""
  key_import=""
  output_prefix=""
  ks_address=""
  ks_version=""
  cache_dir=""
  gnupg_home=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-chains-explorers'
  _check_cmd \
    'evm-chains-info'
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-address' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-versions' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployments-dir' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-gpg-key-address-check'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'evmfs'
  _check_cmd \
    'gpg-key-info'
  _check_cmd \
    'gpg' \
    'gnupg'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/evm-openpgp-keyserver"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/evm-openpgp-keyserver"
  echo \
    "${_dir}"
}

_opts_setup() {
  local \
    _msg=() \
    _credentials_opts=()
  if [[ "${quiet}" == "n" ]]; then
    _evmfs_opts+=(
      -v
    )
  fi
  _credentials_opts+=(
    -N
      "${_wallet_name}"
    -k
      "${_api_key_path}"
    -w
      "${_wallet_path}"
    -s
      "${_wallet_seed}"
    -p
      "${_wallet_password}"
  )
  _evm_contract_call_opts+=(
    "${_credentials_opts[@]}"
    -n
      "${_target_network}"
    -A
      "${_abi}"
    -B
      "${_bytecode}"
    -C
      "${_compiler_output}"
    -t
      "static"
  )
  _evmfs_opts+=(
    "${_credentials_opts[@]}"
    -n
      "${_target_network}"
  )
  _keys_amount_call_opts+=(
    "${_evm_contract_call_opts[@]}"
  )
  _uri_get_call_opts+=(
    "${_evm_contract_call_opts[@]}"
  )
  _msg=(
    "The EVM contract caller will be run"
    "with base options '${_evm_contract_call_opts[*]}'."
  )
  _msg_info \
    "${_msg[*]}"
}

_key_download() {
  local \
    _uri="${1}" \
    _output_file="${2}" \
    _get_opts=()
  _get_opts+=(
    "${_evmfs_opts[@]}"
    -o
      "${_output_file}"
  )
  _msg=(
    "Downloading in '${_output_file}' the key"
    "at URI '${_uri}'."
  )
  _msg_info \
    "${_msg[*]}"
  evmfs \
    "${_get_opts[@]}" \
    get \
      "${_uri}"
}

_keys_amount_get() {
  evm-contract-call \
    "${_keys_amount_call_opts[@]}" \
    "${_ks_address}" \
    "keyNo" \
    "${_address}" \
    "${_publisher}"
}

_uri_key_get() {
  local \
    _key="${1}"
  evm-contract-call \
    "${_uri_get_call_opts[@]}" \
    "${_ks_address}" \
    "readKey" \
    "${_address}" \
    "${_publisher}" \
    "${_key}"
}

_key_fingerprint_get() {
  local \
    _fingerprint="${1}"
  evm-contract-call \
    "${_uri_get_call_opts[@]}" \
    "${_ks_address}" \
    "readKeyFingerprint" \
    "${_address}" \
    "${_publisher}" \
    "${_fingerprint}"
}

_keys_receive() {
  local \
    _target_network="${1}" \
    _ks_address="${2}" \
    _publisher="${3}" \
    _address="${4}" \
    _fingerprint="${5}" \
    _key="${6}" \
    _output_prefix="${7}" \
    _abi="${8}" \
    _bytecode="${9}" \
    _compiler_output="${10}" \
    _msg=() \
    _evm_contract_call_opts=() \
    _evmfs_opts=() \
    _keys=() \
    _key_email \
    _keys_amount \
    _keys_amount_call_opts=() \
    _work_dir \
    _output_prefix_basename \
    _uri \
    _uris=()
  _work_dir="${_cache_dir}/receive"
  _output_prefix_basename="$( \
    basename \
      "${_output_prefix}")"
  mkdir \
    -p \
    "${_work_dir}"
  _opts_setup
  if [[ "${_key}" == "" ]] && \
     [[ "${_fingerprint}" == "" ]]; then
    _msg=(
      "No target key or fingerprint"
      "specified, downloading all"
      "available keys."
    )
    _msg_info \
      "${_msg[*]}"
    _keys_amount="$( \
      _keys_amount_get)"
    _msg=(
      "Got a total of '${_keys_amount}'"
      "keys for address '${_address}'."
    )
    _msg_info \
      "${_msg[*]}"
    _keys+=( $( \
      seq \
        0 \
        "$(( "${_keys_amount}" - 1))")
    )
  elif [[ "${_key}" != "" ]] && \
       [[ "${_fingerprint}" == "" ]]; then
    _keys+=(
      "${_key}"
    )
  elif [[ "${_fingerprint}" != "" ]] && \
       [[ "${_key}" == "" ]]; then
    _key="$( \
      _key_fingerprint_get \
        "${_fingerprint}")"
    _msg=(
      "Got key '${_key}' for"
      "fingerprint '${_fingerprint}'."
    )
    _msg_info \
      "${_msg[*]}"
    _keys+=(
      "${_key}"
    )
  fi
  for _key in "${_keys[@]}"; do
    _msg=(
      "Getting publisher '${_publisher}'"
      "key '${_key}' uri for address"
      "'${_address}'."
    )
    _msg_info \
      "${_msg[*]}"
    _uri="$( \
      _uri_key_get \
        "${_key}")"
    _uris+=(
      "${_uri}"
    )
  done
  for _uri \
    in $(seq \
           0 \
           "$(( "${#_uris[@]}" - 1))"); do
    _key_file="${_work_dir}/${_output_prefix_basename}.${_keys[${_uri}]}.asc"
    _key_download \
      "${_uris[${_uri}]}" \
      "${_key_file}"
    _key_email="$( \
      evm-gpg-key-address-check \
        "${_key_file}" \
        "${_address}" || \
        true)"
    if [[ "${_key_email}" == "" ]]; then
      _msg=(
        "Key '${_key_file}'"
        "invalid, deleting."
      )
      _msg_info \
        "${_msg[*]}"
      rm \
        -rf \
        "${_key_file}"
    elif [[ "${_key_email}" != "" ]]; then
      _msg=(
        "Key '${_key_file}' has"
        "valid address, adding for"
        "processing."
      )
      _msg_info \
        "${_msg[*]}"
      _key_files+=(
        "${_key_file}"
      )
    fi
  done
}

_keys_move() {
  local \
    _output_prefix="${1}" \
    _output_prefix_dirname \
    _msg=()
  _output_prefix_dirname="$( \
    dirname \
      "${_output_prefix}")"
  mv \
    "${_key_files[@]}" \
    "${_output_prefix_dirname}"
  _msg=(
    "Keys correctly moved to"
    "'${_output_prefix_dirname}' directory."
  )
  _msg_info \
    "${_msg[*]}"
}

_keys_import() {
  local \
    _gnupg_home="${1}" \
    _gpg_opts=() \
    _key \
    _msg=()
  _msg=(
    "Importing keys"
    "'${_key_files[*]}' into"
    "GNUPG keystore at directory"
    "${_gnupg_home}."
  )
  _msg_info \
    "${_msg[*]}"
  mkdir \
    -p \
    "${_gnupg_home}"
  chmod \
    700 \
    "${_gnupg_home}"
  _gpg_opts+=(
    --homedir
      "${_gnupg_home}"
    --import
  )
  for _key in "${_key_files[@]}"; do
    GNUPG_HOME="${_gnupg_home}" \
    cat \
      "${_key}" | \
      gpg \
        "${_gpg_opts[@]}" \
        "${_key}"
  done
}

_evm_openpgp_key_receive() {
  local \
    _ks_address="${1}" \
    _ks_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _cache_dir="${10}" \
    _input_type="${11}" \
    _key_import="${12}" \
    _gnupg_home="${13}" \
    _target_publisher="${14}" \
    _target_address="${15}" \
    _target_key="${16}" \
    _key_fingerprint="${17}" \
    _output_prefix="${18}" \
    _key_files=() \
    _msg=() \
    _ks_abi \
    _ks_bytecode \
    _ks_compiler_output
  shift \
    18
  _command_args+=(
    "$@"
  )
  if [[ "${_target_publisher}" == "" ]]; then
    _target_publisher="${_target_address}"
  fi
  if [[ "${_target_publisher}" != "${_target_address}" ]]; then
    _msg=(
      "Not getting '${_target_address}'"
      "self-published keys but from"
      "publisher '${_target_publisher}'."
    )
    _msg_warning \
      "${_msg[*]}"
  elif [[ "${_target_publisher}" == "${_target_address}" ]]; then
  _msg=(
    "Getting '${_target_address}' self-published"
    "key(s) (safest option)."
  )
  _msg_info \
    "${_msg[*]}"
  fi
  if [[ "${_input_type}" == "fingerprint" ]]; then
    _key_fingerprint="${_target_key}"
    _target_key=""
  fi
  if [[ "${_target_key}" == "" ]] && \
     [[ "${_key_fingerprint}" == "" ]]; then
    _msg=(
      "No target key or fingerprint"
      "specified, downloading all"
      "available keys."
    )
    _download_all="true"
  fi
  _contract_artifacts_auto_detect \
    "${_deployments_dir}" \
    "${_target_network}" \
    "KeyServer" \
    "_ks" \
    "${_ks_version}"
  _keys_receive \
    "${_target_network}" \
    "${_ks_address}" \
    "${_target_publisher}" \
    "${_target_address}" \
    "${_key_fingerprint}" \
    "${_target_key}" \
    "${_output_prefix}" \
    "${_ks_abi}" \
    "${_ks_bytecode}" \
    "${_ks_compiler_output}"
  if [[ "${_key_import}" == "y" ]]; then
    _keys_import \
      "${_gnupg_home}"
  elif [[ "${_key_import}" == "n" ]]; then
    _keys_move \
      "${_output_prefix}"
  fi
}

_input_type_auto_detect() {
  local \
    _target_key \
    _input_type \
    _re
  _re='^[0-9]+$'
  _target_key="${target_key}"
  _input_type="number"
  if [[ "${_target_key}" != "" ]]; then
    if ! [[ ${_target_key} =~ ${_re} ]] ; then
      _input_type="fingerprint"
    fi
  fi
  _set_override \
    "input" \
    "type" \
    "${_input_type}"
}

_key_import_auto_detect() {
  local \
    _gnupg_home \
    _import
  _gnupg_home="${gnupg_home}"
  _import="y"
  if [[ "${_gnupg_home}" == "${HOME}/.gnupg" ]]; then
    _import="n"
  fi
  _set_override \
    "key" \
    "import" \
    "${_import}"
}

_output_prefix_auto_detect() {
  local \
    _key_import \
    _base_prefix \
    _key_basename \
    _output_prefix \
    _target_address
  _key_import="${key_import}"
  _target_address="${target_address}"
  _target_key="${target_key}"
  _output_prefix=""
  if [[ "${_key_import}" == "n" ]]; then
    _base_prefix="$( \
      pwd)"
  elif [[ "${_key_import}" == "y" ]]; then
    _base_prefix="${HOME}/.cache/evm-openpgp-keyserver/receive"
  fi
  if [[ "${_target_address}" != "" ]]; then
    if [[ "${_target_key}" != "" ]]; then
      _key_basename="${_target_address}.${_target_key}"
    elif [[ "${_target_key}" == "" ]]; then
      _key_basename="${_target_address}"
    fi
  elif [[ "${_target_address}" == "" ]]; then
    _key_basename="<target_address>.<target_key>.key"
  fi
  _output_prefix="${_base_prefix}/${_key_basename}"
  _set_override \
    "output" \
    "prefix" \
    "${_output_prefix}"
}

_set_overrides() {
  local \
    _target_address \
    _target_key
  _target_address="${target_address}"
  _target_key="${target_key}"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "receive" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "evm-openpgp-keyserver" \
    "${user_level}"
  _network_auto_detect \
    "KeyServer" \
    "${deployments_dir}" \
    "${user_level}"
  _api_key_auto_detect \
    "${target_network}"
  _wallet_overrides_set \
    "evm-wallet" \
    "default" \
    "n"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _contract_setup_auto_detect \
    "evm-openpgp-keyserver" \
    "KeyServer" \
    "ks" \
    "${target_network}" \
    "${user_level}" \
    "${deployments_dir}"
  _set_override \
    "gnupg" \
    "home" \
    "${HOME}/.gnupg"
  _key_import_auto_detect
  _set_override \
    "target" \
    "publisher" \
    "${_target_address}"
  _input_type_auto_detect
  _output_prefix_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _exit="${1}" \
    _contract \
    _ks_deployment \
    _networks \
    _usage_text
  _contract="KeyServer"
  _ks_deployment="${deployments_dir}/${_contract}"
  _networks=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_ks_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ethereum Virtual Machine-compatible network OpenPGP Key Server keys receiver

Usage:
  ${app_name}
    [options]
    <address>
    (<key>)

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -P <publisher>         Key publisher.
                            Default: ${target_publisher}
     -H <gnupg_home>        GnuPG configuration directory.
                            Default: ${gnupg_home}
     -t <input_type>        Input type for the optional 'key' argument.
                            It can be 'fingerprint' or
                            'number'.
                            Default: ${input_type}
     -f <y/n>               Save the keys to file without
                            importing them into the keystore.
                            Defaults to 'y' if the GNUPG
                            configuration directory
                            is not the default user one,
                            'n' otherwise.
                            Default: ${key_import}
     -o                     Output key prefix.
                            Default: ${output_prefix}

  contract options:
     -A <ks_address>        Address of the EVM OpenPGP Key Server
                            on the network.
                            Default: ${ks_address}
     -V <ks_version>        Version of the target EVM OpenPGP Key
                            Server.
                            Default: ${ks_version}

  libevm options
     -u                     Whether to retrieve key server
                            address from user directory or from
                            a custom deployment.
                            Default: ${user_level}
     -d <deployments_dir>   Contracts deployments directory.
                            Default: ${deployments_dir}
     -n <network>           EVM network name (${_networks[*]}).
                            Default: ${target_network}

  credentials options:
     -N <wallet_name>       Wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       Wallet path.
                            Default: ${wallet_path}
     -p <wallet_password>   Wallet password.
                            Default: ${wallet_password}
     -s <wallet_seed>       Wallet seed path.
                            Default: ${wallet_seed}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}

  application options:
     -C <cache_dir>         Work directory
                            Default: ${cache_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${_exit}"
}

_display_flags() {
  local \
    _flag \
    _flags=(
      "${1}"
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Receive date:   ${receive_date}"
  _msg_info "       Key server address:   ${ks_address}"
  _msg_info "       Key server version:   ${ks_version}"
  _msg_info "               User level:   ${user_level}"
  _msg_info "    Deployments directory:   ${deployments_dir}"
  _msg_info "                Publisher:   ${wallet_address}"
  _msg_info "              Wallet name:   ${wallet_name}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "          Cache directory:   ${cache_dir}"
  _msg_info "               Input type:   ${input_type}"
  _msg_info "               Import key:   ${key_import}"
  _msg_info "     GnuPG home directory:   ${gnupg_home}"
  _msg_info "         Target publisher:   ${target_publisher}"
  _msg_info "           Target address:   ${target_address}"
  _msg_info "               Target key:   ${target_key}"
  _msg_info "          Key fingerprint:   ${key_fingerprint}"
  _msg_info "        Output key prefix:   ${output_prefix}"
}

_globals
_global_variables
_libevm_global_variables
_libevm_app_global_variables
_requirements
_config_user_init \
  "${app_name}"
getopts_opts="$( \
  printf \
    "%s" \
    "H:t:f:C:P:" \
    "A:V:" \
    "$(_libevm_app_getopts_params_get)" \
    "n:" \
    "$(_wallet_getopts_params_get)" \
    "C:cvh")"
# shellcheck disable=SC2034
while \
  getopts \
    "${getopts_opts}" \
    arg; do
  _wallet_getopts_case
  _libevm_app_getopts_case
  case \
    "${arg}" in
    A) \
      override_ks_address="${OPTARG}" ;;
    V) \
      override_ks_version="${OPTARG}" ;;
    n) \
      override_target_network="${OPTARG}" ;;
    H) \
      override_gnupg_home="${OPTARG}" ;;
    t) \
      override_input_type="${OPTARG}" ;;
    f) \
      override_key_import="${OPTARG}" ;;
    C) \
      override_cache_dir="${OPTARG}" ;;
    P) \
      override_target_publisher="${OPTARG}" ;;
    c) \
      override_color="y" ;;
    v) \
      override_quiet="n" ;;
    h) \
      _set_overrides && \
      _usage \
        0 ;;
    *) \
      if [[ " ${getopts_opts} " != *"${arg}"* ]]; then
        _msg_error \
          "Invalid argument '${arg}'." \
          0
        _usage \
          1
      fi ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg=(
    "No target address given."
  )
  _msg_error \
    "${_msg[*]}" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  target_address="${1}"
fi
if (( $# < 2 )); then
  _msg=(
    "No target key given,"
    "getting all of them."
  )
  _msg_warning \
    "${_msg[*]}"
fi
if (( 1 < $# )); then
  target_key="${2}"
fi
shift \
  2 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${ks_address}"
  "${ks_version}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${cache_dir}"
  "${input_type}"
  "${key_import}"
  "${gnupg_home}"
  "${target_publisher}"
  "${target_address}"
  "${target_key}"
  "${key_fingerprint}"
  "${output_prefix}"
)
_evm_openpgp_key_receive \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
